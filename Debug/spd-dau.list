
spd-dau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080049b0  080049b0  000059b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a14  08004a14  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a14  08004a14  00005a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a1c  08004a1c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a1c  08004a1c  00005a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a20  08004a20  00005a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08004a30  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004a30  00006180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f78b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbf  00000000  00000000  000157c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00017788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000964  00000000  00000000  000183c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc3d  00000000  00000000  00018d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db25  00000000  00000000  00035961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b80ea  00000000  00000000  00043486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a4  00000000  00000000  000fb5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fe858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004998 	.word	0x08004998

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004998 	.word	0x08004998

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb59 	bl	8000bc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f834 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f910 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f8c2 	bl	80006a0 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 800051c:	f000 f87a 	bl	8000614 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Configure the FDCAN peripheral */
  FDCAN_Config();
 8000520:	f000 f94a 	bl	80007b8 <FDCAN_Config>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_UART_Transmit(&huart2, (uint8_t*)"Hello,  world\n\r", 10, 1000);
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)"HelloIT,  world\n\r", 10);
 8000524:	220a      	movs	r2, #10
 8000526:	490f      	ldr	r1, [pc, #60]	@ (8000564 <main+0x5c>)
 8000528:	480f      	ldr	r0, [pc, #60]	@ (8000568 <main+0x60>)
 800052a:	f002 fe23 	bl	8003174 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000532:	f000 fbb7 	bl	8000ca4 <HAL_Delay>


	/* Set the data to be transmitted */
	TxData[0] = 0x11;
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <main+0x64>)
 8000538:	2211      	movs	r2, #17
 800053a:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0xAD;
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <main+0x64>)
 800053e:	22ad      	movs	r2, #173	@ 0xad
 8000540:	705a      	strb	r2, [r3, #1]

	/* Start the Transmission process */
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <main+0x64>)
 8000544:	490a      	ldr	r1, [pc, #40]	@ (8000570 <main+0x68>)
 8000546:	480b      	ldr	r0, [pc, #44]	@ (8000574 <main+0x6c>)
 8000548:	f000 ffab 	bl	80014a2 <HAL_FDCAN_AddMessageToTxFifoQ>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <main+0x4e>
	{
	  /* Transmission request Error */
	  Error_Handler();
 8000552:	f000 f9ca 	bl	80008ea <Error_Handler>
	}



	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000556:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800055a:	4807      	ldr	r0, [pc, #28]	@ (8000578 <main+0x70>)
 800055c:	f001 fdce 	bl	80020fc <HAL_GPIO_TogglePin>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)"HelloIT,  world\n\r", 10);
 8000560:	e7e0      	b.n	8000524 <main+0x1c>
 8000562:	bf00      	nop
 8000564:	080049b0 	.word	0x080049b0
 8000568:	2000008c 	.word	0x2000008c
 800056c:	20000174 	.word	0x20000174
 8000570:	20000150 	.word	0x20000150
 8000574:	20000028 	.word	0x20000028
 8000578:	48000400 	.word	0x48000400

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2238      	movs	r2, #56	@ 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f9d8 	bl	8004940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059e:	2000      	movs	r0, #0
 80005a0:	f001 fdc6 	bl	8002130 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2340      	movs	r3, #64	@ 0x40
 80005b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005be:	2314      	movs	r3, #20
 80005c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fe60 	bl	8002298 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005de:	f000 f984 	bl	80008ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f95e 	bl	80028bc <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000606:	f000 f970 	bl	80008ea <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	@ 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 800061a:	4a20      	ldr	r2, [pc, #128]	@ (800069c <MX_FDCAN1_Init+0x88>)
 800061c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000632:	2200      	movs	r2, #0
 8000634:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 800063e:	2200      	movs	r2, #0
 8000640:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 800064a:	2201      	movs	r2, #1
 800064c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 239;
 800064e:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000650:	22ef      	movs	r2, #239	@ 0xef
 8000652:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 80;
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000656:	2250      	movs	r2, #80	@ 0x50
 8000658:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 800065c:	2201      	movs	r2, #1
 800065e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000660:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000662:	2201      	movs	r2, #1
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000668:	2201      	movs	r2, #1
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 800066e:	2201      	movs	r2, #1
 8000670:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 800067a:	2200      	movs	r2, #0
 800067c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_FDCAN1_Init+0x84>)
 8000686:	f000 fcff 	bl	8001088 <HAL_FDCAN_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000690:	f000 f92b 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000028 	.word	0x20000028
 800069c:	40006400 	.word	0x40006400

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006a6:	4a23      	ldr	r2, [pc, #140]	@ (8000734 <MX_USART2_UART_Init+0x94>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e8:	4811      	ldr	r0, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006ea:	f002 fcf3 	bl	80030d4 <HAL_UART_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006f4:	f000 f8f9 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 80006fc:	f004 f855 	bl	80047aa <HAL_UARTEx_SetTxFifoThreshold>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000706:	f000 f8f0 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4808      	ldr	r0, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 800070e:	f004 f88a 	bl	8004826 <HAL_UARTEx_SetRxFifoThreshold>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000718:	f000 f8e7 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_USART2_UART_Init+0x90>)
 800071e:	f004 f80b 	bl	8004738 <HAL_UARTEx_DisableFifoMode>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000728:	f000 f8df 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000008c 	.word	0x2000008c
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_GPIO_Init+0x78>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a17      	ldr	r2, [pc, #92]	@ (80007b0 <MX_GPIO_Init+0x78>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_GPIO_Init+0x78>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_GPIO_Init+0x78>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <MX_GPIO_Init+0x78>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_GPIO_Init+0x78>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8000784:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <MX_GPIO_Init+0x7c>)
 8000786:	f001 fca1 	bl	80020cc <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800078a:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800078e:	60fb      	str	r3, [r7, #12]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_GPIO_Init+0x7c>)
 80007a4:	f001 fb10 	bl	8001dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000400 	.word	0x48000400

080007b8 <FDCAN_Config>:
  * @brief  Configures the FDCAN.
  * @param  None
  * @retval None
  */
static void FDCAN_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x321;
 80007ce:	f240 3321 	movw	r3, #801	@ 0x321
 80007d2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 80007d4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007d8:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <FDCAN_Config+0xb4>)
 80007e0:	f000 fdac 	bl	800133c <HAL_FDCAN_ConfigFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <FDCAN_Config+0x36>
  {
    Error_Handler();
 80007ea:	f000 f87e 	bl	80008ea <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80007ee:	2300      	movs	r3, #0
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2300      	movs	r3, #0
 80007f4:	2202      	movs	r2, #2
 80007f6:	2102      	movs	r1, #2
 80007f8:	481c      	ldr	r0, [pc, #112]	@ (800086c <FDCAN_Config+0xb4>)
 80007fa:	f000 fdf9 	bl	80013f0 <HAL_FDCAN_ConfigGlobalFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <FDCAN_Config+0x50>
  {
    Error_Handler();
 8000804:	f000 f871 	bl	80008ea <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000808:	4818      	ldr	r0, [pc, #96]	@ (800086c <FDCAN_Config+0xb4>)
 800080a:	f000 fe22 	bl	8001452 <HAL_FDCAN_Start>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <FDCAN_Config+0x60>
  {
    Error_Handler();
 8000814:	f000 f869 	bl	80008ea <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	4813      	ldr	r0, [pc, #76]	@ (800086c <FDCAN_Config+0xb4>)
 800081e:	f000 ff8d 	bl	800173c <HAL_FDCAN_ActivateNotification>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <FDCAN_Config+0x74>
  {
    Error_Handler();
 8000828:	f000 f85f 	bl	80008ea <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x321;
 800082c:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <FDCAN_Config+0xb8>)
 800082e:	f240 3221 	movw	r2, #801	@ 0x321
 8000832:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <FDCAN_Config+0xb8>)
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <FDCAN_Config+0xb8>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <FDCAN_Config+0xb8>)
 8000842:	2202      	movs	r2, #2
 8000844:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <FDCAN_Config+0xb8>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <FDCAN_Config+0xb8>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <FDCAN_Config+0xb8>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <FDCAN_Config+0xb8>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800085e:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <FDCAN_Config+0xb8>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000028 	.word	0x20000028
 8000870:	20000150 	.word	0x20000150

08000874 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b00      	cmp	r3, #0
 8000886:	d01d      	beq.n	80008c4 <HAL_FDCAN_RxFifo0Callback+0x50>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x58>)
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800088c:	2140      	movs	r1, #64	@ 0x40
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 fe4c 	bl	800152c <HAL_FDCAN_GetRxMessage>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    	Error_Handler();
 800089a:	f000 f826 	bl	80008ea <Error_Handler>
    }

    /* Display LEDx */
    if ((RxHeader.Identifier == 0x321) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_2))
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f240 3221 	movw	r2, #801	@ 0x321
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10c      	bne.n	80008c4 <HAL_FDCAN_RxFifo0Callback+0x50>
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d108      	bne.n	80008c4 <HAL_FDCAN_RxFifo0Callback+0x50>
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d104      	bne.n	80008c4 <HAL_FDCAN_RxFifo0Callback+0x50>
    {
    	LED_Display(RxData[0]);
 80008ba:	4b04      	ldr	r3, [pc, #16]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x58>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f808 	bl	80008d4 <LED_Display>
      //ubKeyNumber = RxData[0];
    }
  }
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000148 	.word	0x20000148
 80008d0:	20000120 	.word	0x20000120

080008d4 <LED_Display>:
  * @brief  Turns ON/OFF the dedicated LED.
  * @param  LedStatus: LED number from 1 to 4
  * @retval None
  */
void LED_Display(uint8_t LedStatus)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ee:	b672      	cpsid	i
}
 80008f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000902:	4a0e      	ldr	r2, [pc, #56]	@ (800093c <HAL_MspInit+0x44>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6613      	str	r3, [r2, #96]	@ 0x60
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <HAL_MspInit+0x44>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091a:	4a08      	ldr	r2, [pc, #32]	@ (800093c <HAL_MspInit+0x44>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000920:	6593      	str	r3, [r2, #88]	@ 0x58
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HAL_MspInit+0x44>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800092e:	f001 fca3 	bl	8002278 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b09a      	sub	sp, #104	@ 0x68
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2244      	movs	r2, #68	@ 0x44
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f003 ffed 	bl	8004940 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a24      	ldr	r2, [pc, #144]	@ (80009fc <HAL_FDCAN_MspInit+0xbc>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d141      	bne.n	80009f4 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000974:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800097a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4618      	mov	r0, r3
 8000982:	f002 f9b7 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800098c:	f7ff ffad 	bl	80008ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000990:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <HAL_FDCAN_MspInit+0xc0>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000994:	4a1a      	ldr	r2, [pc, #104]	@ (8000a00 <HAL_FDCAN_MspInit+0xc0>)
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800099a:	6593      	str	r3, [r2, #88]	@ 0x58
 800099c:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <HAL_FDCAN_MspInit+0xc0>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_FDCAN_MspInit+0xc0>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	4a14      	ldr	r2, [pc, #80]	@ (8000a00 <HAL_FDCAN_MspInit+0xc0>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_FDCAN_MspInit+0xc0>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009d2:	2309      	movs	r3, #9
 80009d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e0:	f001 f9f2 	bl	8001dc8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2015      	movs	r0, #21
 80009ea:	f000 fa58 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009ee:	2015      	movs	r0, #21
 80009f0:	f000 fa6f 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	3768      	adds	r7, #104	@ 0x68
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40006400 	.word	0x40006400
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09a      	sub	sp, #104	@ 0x68
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2244      	movs	r2, #68	@ 0x44
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 ff8b 	bl	8004940 <memset>
  if(huart->Instance==USART2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <HAL_UART_MspInit+0xb8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d13e      	bne.n	8000ab2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f957 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a4c:	f7ff ff4d 	bl	80008ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a54:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a80:	230c      	movs	r3, #12
 8000a82:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a90:	2307      	movs	r3, #7
 8000a92:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9e:	f001 f993 	bl	8001dc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2026      	movs	r0, #38	@ 0x26
 8000aa8:	f000 f9f9 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aac:	2026      	movs	r0, #38	@ 0x26
 8000aae:	f000 fa10 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3768      	adds	r7, #104	@ 0x68
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1a:	f000 f8a5 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <FDCAN1_IT0_IRQHandler+0x10>)
 8000b2a:	f000 feed 	bl	8001908 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000028 	.word	0x20000028

08000b38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <USART2_IRQHandler+0x10>)
 8000b3e:	f002 fbad 	bl	800329c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000008c 	.word	0x2000008c

08000b4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b72:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b74:	f7ff ffea 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	@ (8000bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	@ (8000bbc <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f003 fed7 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba2:	f7ff fcb1 	bl	8000508 <main>

08000ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   r0, =_estack
 8000ba8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb4:	08004a24 	.word	0x08004a24
  ldr r2, =_sbss
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bbc:	20000180 	.word	0x20000180

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>

08000bc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f95b 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f80e 	bl	8000bf4 <HAL_InitTick>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	e001      	b.n	8000be8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be4:	f7ff fe88 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be8:	79fb      	ldrb	r3, [r7, #7]

}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c00:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <HAL_InitTick+0x68>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d022      	beq.n	8000c4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_InitTick+0x6c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <HAL_InitTick+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f966 	bl	8000eee <HAL_SYSTICK_Config>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10f      	bne.n	8000c48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d809      	bhi.n	8000c42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c36:	f000 f932 	bl	8000e9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_InitTick+0x70>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e004      	b.n	8000c52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e001      	b.n	8000c52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_IncTick+0x1c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <HAL_IncTick+0x20>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a03      	ldr	r2, [pc, #12]	@ (8000c84 <HAL_IncTick+0x1c>)
 8000c78:	6013      	str	r3, [r2, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	2000017c 	.word	0x2000017c
 8000c88:	20000008 	.word	0x20000008

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	2000017c 	.word	0x2000017c

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cbc:	d004      	beq.n	8000cc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_Delay+0x40>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc8:	bf00      	nop
 8000cca:	f7ff ffdf 	bl	8000c8c <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d8f7      	bhi.n	8000cca <HAL_Delay+0x26>
  {
  }
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff40 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff90 	bl	8000ddc <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5f 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff33 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa4 	bl	8000e44 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d005      	beq.n	8000f2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2204      	movs	r2, #4
 8000f22:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e037      	b.n	8000f9a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 020e 	bic.w	r2, r2, #14
 8000f38:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f48:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f003 021f 	and.w	r2, r3, #31
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f76:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00c      	beq.n	8000f9a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f8e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f98:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d00d      	beq.n	8000fec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e047      	b.n	800107c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 020e 	bic.w	r2, r2, #14
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0201 	bic.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001016:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800101a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001038:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00c      	beq.n	800105c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001050:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800105a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	4798      	blx	r3
    }
  }
  return status;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e147      	b.n	800132a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fc46 	bl	8000940 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699a      	ldr	r2, [r3, #24]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0210 	bic.w	r2, r2, #16
 80010c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff fde2 	bl	8000c8c <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ca:	e012      	b.n	80010f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010cc:	f7ff fdde 	bl	8000c8c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e11b      	b.n	800132a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d0e5      	beq.n	80010cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff fdbc 	bl	8000c8c <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001116:	e012      	b.n	800113e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001118:	f7ff fdb8 	bl	8000c8c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0f5      	b.n	800132a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0e5      	beq.n	8001118 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	699a      	ldr	r2, [r3, #24]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0202 	orr.w	r2, r2, #2
 800115a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a74      	ldr	r2, [pc, #464]	@ (8001334 <HAL_FDCAN_Init+0x2ac>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d103      	bne.n	800116e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001166:	4a74      	ldr	r2, [pc, #464]	@ (8001338 <HAL_FDCAN_Init+0x2b0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7c1b      	ldrb	r3, [r3, #16]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d108      	bne.n	8001188 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001184:	619a      	str	r2, [r3, #24]
 8001186:	e007      	b.n	8001198 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001196:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7c5b      	ldrb	r3, [r3, #17]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d108      	bne.n	80011b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	e007      	b.n	80011c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7c9b      	ldrb	r3, [r3, #18]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011d8:	619a      	str	r2, [r3, #24]
 80011da:	e007      	b.n	80011ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	699a      	ldr	r2, [r3, #24]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001210:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0210 	bic.w	r2, r2, #16
 8001220:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d108      	bne.n	800123c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0204 	orr.w	r2, r2, #4
 8001238:	619a      	str	r2, [r3, #24]
 800123a:	e02c      	b.n	8001296 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d028      	beq.n	8001296 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d01c      	beq.n	8001286 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800125a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0210 	orr.w	r2, r2, #16
 800126a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d110      	bne.n	8001296 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0220 	orr.w	r2, r2, #32
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	e007      	b.n	8001296 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0220 	orr.w	r2, r2, #32
 8001294:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	3b01      	subs	r3, #1
 800129c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012ca:	d115      	bne.n	80012f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d6:	3b01      	subs	r3, #1
 80012d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	3b01      	subs	r3, #1
 80012e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	3b01      	subs	r3, #1
 80012ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fc88 	bl	8001c24 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40006400 	.word	0x40006400
 8001338:	40006500 	.word	0x40006500

0800133c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800134c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d002      	beq.n	800135a <HAL_FDCAN_ConfigFilter+0x1e>
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d13d      	bne.n	80013d6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d119      	bne.n	8001396 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800136e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001376:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e01d      	b.n	80013d2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	075a      	lsls	r2, r3, #29
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	079a      	lsls	r2, r3, #30
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3304      	adds	r3, #4
 80013ca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e006      	b.n	80013e4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013da:	f043 0202 	orr.w	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
  }
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d116      	bne.n	8001438 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001412:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	011a      	lsls	r2, r3, #4
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	431a      	orrs	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	431a      	orrs	r2, r3
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	431a      	orrs	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e006      	b.n	8001446 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143c:	f043 0204 	orr.w	r2, r3, #4
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
  }
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d110      	bne.n	8001488 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2202      	movs	r2, #2
 800146a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699a      	ldr	r2, [r3, #24]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	e006      	b.n	8001496 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148c:	f043 0204 	orr.w	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
  }
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d12c      	bne.n	8001514 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e023      	b.n	8001522 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014e2:	0c1b      	lsrs	r3, r3, #16
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 fbed 	bl	8001cd0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2101      	movs	r1, #1
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001506:	2201      	movs	r2, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	e006      	b.n	8001522 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001518:	f043 0208 	orr.w	r2, r3, #8
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
  }
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800152c:	b480      	push	{r7}
 800152e:	b08b      	sub	sp, #44	@ 0x2c
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001544:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001546:	7efb      	ldrb	r3, [r7, #27]
 8001548:	2b02      	cmp	r3, #2
 800154a:	f040 80e8 	bne.w	800171e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2b40      	cmp	r3, #64	@ 0x40
 8001552:	d137      	bne.n	80015c4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	2b00      	cmp	r3, #0
 8001562:	d107      	bne.n	8001574 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001568:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0db      	b.n	800172c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157c:	0e1b      	lsrs	r3, r3, #24
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d10a      	bne.n	800159c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800158e:	0a5b      	lsrs	r3, r3, #9
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c2:	e036      	b.n	8001632 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d107      	bne.n	80015e4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0a3      	b.n	800172c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015ec:	0e1b      	lsrs	r3, r3, #24
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d10a      	bne.n	800160c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001608:	2301      	movs	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4413      	add	r3, r2
 800161e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0c9b      	lsrs	r3, r3, #18
 800164c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e005      	b.n	8001662 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	3304      	adds	r3, #4
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0c1b      	lsrs	r3, r3, #16
 8001690:	f003 020f 	and.w	r2, r3, #15
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0e1b      	lsrs	r3, r3, #24
 80016b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0fda      	lsrs	r2, r3, #31
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	3304      	adds	r3, #4
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	e00a      	b.n	80016ee <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	441a      	add	r2, r3
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	440b      	add	r3, r1
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	3301      	adds	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	4a11      	ldr	r2, [pc, #68]	@ (8001738 <HAL_FDCAN_GetRxMessage+0x20c>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	461a      	mov	r2, r3
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d3ec      	bcc.n	80016d8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b40      	cmp	r3, #64	@ 0x40
 8001702:	d105      	bne.n	8001710 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800170e:	e004      	b.n	800171a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e006      	b.n	800172c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	f043 0208 	orr.w	r2, r3, #8
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
  }
}
 800172c:	4618      	mov	r0, r3
 800172e:	372c      	adds	r7, #44	@ 0x2c
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	080049dc 	.word	0x080049dc

0800173c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800174e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d003      	beq.n	800175e <HAL_FDCAN_ActivateNotification+0x22>
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	2b02      	cmp	r3, #2
 800175a:	f040 80c8 	bne.w	80018ee <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d03b      	beq.n	80017f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d031      	beq.n	80017f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d027      	beq.n	80017f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d01d      	beq.n	80017f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d013      	beq.n	80017f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00c      	beq.n	8001802 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d13b      	bne.n	800188e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d131      	bne.n	800188e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d127      	bne.n	800188e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d11d      	bne.n	800188e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b00      	cmp	r3, #0
 8001864:	d113      	bne.n	800188e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00c      	beq.n	800189e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0202 	orr.w	r2, r2, #2
 800189c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e006      	b.n	80018fc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	f043 0202 	orr.w	r2, r3, #2
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	@ 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001916:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001924:	4013      	ands	r3, r2
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800193c:	4013      	ands	r3, r2
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001954:	4013      	ands	r3, r2
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800195e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001962:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196a:	6a3a      	ldr	r2, [r7, #32]
 800196c:	4013      	ands	r3, r2
 800196e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001976:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800197a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001996:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2240      	movs	r2, #64	@ 0x40
 80019b2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f916 	bl	8001be6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d019      	beq.n	80019f8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d014      	beq.n	80019f8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019d6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80019f0:	6939      	ldr	r1, [r7, #16]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f8d8 	bl	8001ba8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a04:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f8a2 	bl	8001b52 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a1a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe ff28 	bl	8000874 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a30:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f897 	bl	8001b68 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00c      	beq.n	8001a5e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f890 	bl	8001b7e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d018      	beq.n	8001a9a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d013      	beq.n	8001a9a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a7a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f87c 	bl	8001b92 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00c      	beq.n	8001abe <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ab6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f880 	bl	8001bbe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ada:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f878 	bl	8001bd2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00f      	beq.n	8001b0c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001afe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b1a:	69f9      	ldr	r1, [r7, #28]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f876 	bl	8001c0e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f858 	bl	8001bfa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	3730      	adds	r7, #48	@ 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001c2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001c2e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c3e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c46:	041a      	lsls	r2, r3, #16
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c64:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6c:	061a      	lsls	r2, r3, #24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e005      	b.n	8001cb2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3f3      	bcc.n	8001ca6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	4000a400 	.word	0x4000a400

08001cd0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10a      	bne.n	8001cfc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001cee:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e00a      	b.n	8001d12 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001d04:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001d0a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d10:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d1c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001d22:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001d28:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	440b      	add	r3, r1
 8001d44:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e020      	b.n	8001da6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3303      	adds	r3, #3
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3302      	adds	r3, #2
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	440b      	add	r3, r1
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d7c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	440b      	add	r3, r1
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d8a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	440a      	add	r2, r1
 8001d92:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d94:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3304      	adds	r3, #4
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <FDCAN_CopyMessageToRAM+0xf4>)
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
 8001dae:	461a      	mov	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d3d6      	bcc.n	8001d64 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	3724      	adds	r7, #36	@ 0x24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	080049dc 	.word	0x080049dc

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dd6:	e15a      	b.n	800208e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 814c 	beq.w	8002088 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d005      	beq.n	8001e08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d130      	bne.n	8001e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 0201 	and.w	r2, r3, #1
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d017      	beq.n	8001ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d123      	bne.n	8001efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	6939      	ldr	r1, [r7, #16]
 8001ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0203 	and.w	r2, r3, #3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80a6 	beq.w	8002088 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3c:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <HAL_GPIO_Init+0x2e4>)
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f40:	4a5a      	ldr	r2, [pc, #360]	@ (80020ac <HAL_GPIO_Init+0x2e4>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f48:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <HAL_GPIO_Init+0x2e4>)
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f54:	4a56      	ldr	r2, [pc, #344]	@ (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f7e:	d01f      	beq.n	8001fc0 <HAL_GPIO_Init+0x1f8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a4c      	ldr	r2, [pc, #304]	@ (80020b4 <HAL_GPIO_Init+0x2ec>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d019      	beq.n	8001fbc <HAL_GPIO_Init+0x1f4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a4b      	ldr	r2, [pc, #300]	@ (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d013      	beq.n	8001fb8 <HAL_GPIO_Init+0x1f0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a4a      	ldr	r2, [pc, #296]	@ (80020bc <HAL_GPIO_Init+0x2f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00d      	beq.n	8001fb4 <HAL_GPIO_Init+0x1ec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a49      	ldr	r2, [pc, #292]	@ (80020c0 <HAL_GPIO_Init+0x2f8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d007      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a48      	ldr	r2, [pc, #288]	@ (80020c4 <HAL_GPIO_Init+0x2fc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_GPIO_Init+0x1e4>
 8001fa8:	2305      	movs	r3, #5
 8001faa:	e00a      	b.n	8001fc2 <HAL_GPIO_Init+0x1fa>
 8001fac:	2306      	movs	r3, #6
 8001fae:	e008      	b.n	8001fc2 <HAL_GPIO_Init+0x1fa>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x1fa>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_Init+0x1fa>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_Init+0x1fa>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_Init+0x1fa>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd2:	4937      	ldr	r1, [pc, #220]	@ (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe0:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002004:	4a30      	ldr	r2, [pc, #192]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800200a:	4b2f      	ldr	r3, [pc, #188]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800202e:	4a26      	ldr	r2, [pc, #152]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002058:	4a1b      	ldr	r2, [pc, #108]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800205e:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002082:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	f47f ae9d 	bne.w	8001dd8 <HAL_GPIO_Init+0x10>
  }
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000
 80020b4:	48000400 	.word	0x48000400
 80020b8:	48000800 	.word	0x48000800
 80020bc:	48000c00 	.word	0x48000c00
 80020c0:	48001000 	.word	0x48001000
 80020c4:	48001400 	.word	0x48001400
 80020c8:	40010400 	.word	0x40010400

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43d9      	mvns	r1, r3
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	400b      	ands	r3, r1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	619a      	str	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d141      	bne.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800213e:	4b4b      	ldr	r3, [pc, #300]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800214a:	d131      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800214c:	4b47      	ldr	r3, [pc, #284]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002152:	4a46      	ldr	r2, [pc, #280]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800215c:	4b43      	ldr	r3, [pc, #268]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002164:	4a41      	ldr	r2, [pc, #260]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800216a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800216c:	4b40      	ldr	r3, [pc, #256]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2232      	movs	r2, #50	@ 0x32
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	3301      	adds	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002182:	e002      	b.n	800218a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3b01      	subs	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218a:	4b38      	ldr	r3, [pc, #224]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002196:	d102      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f2      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800219e:	4b33      	ldr	r3, [pc, #204]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021aa:	d158      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e057      	b.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021b0:	4b2e      	ldr	r3, [pc, #184]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021b6:	4a2d      	ldr	r2, [pc, #180]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021c0:	e04d      	b.n	800225e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021c8:	d141      	bne.n	800224e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ca:	4b28      	ldr	r3, [pc, #160]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d6:	d131      	bne.n	800223c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021d8:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021de:	4a23      	ldr	r2, [pc, #140]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e8:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021f0:	4a1e      	ldr	r2, [pc, #120]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2232      	movs	r2, #50	@ 0x32
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	4a1c      	ldr	r2, [pc, #112]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	0c9b      	lsrs	r3, r3, #18
 800220a:	3301      	adds	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220e:	e002      	b.n	8002216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3b01      	subs	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002216:	4b15      	ldr	r3, [pc, #84]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002222:	d102      	bne.n	800222a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f2      	bne.n	8002210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002236:	d112      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e011      	b.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800224c:	e007      	b.n	800225e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800224e:	4b07      	ldr	r3, [pc, #28]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002256:	4a05      	ldr	r2, [pc, #20]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002258:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800225c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40007000 	.word	0x40007000
 8002270:	20000000 	.word	0x20000000
 8002274:	431bde83 	.word	0x431bde83

08002278 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002286:	6093      	str	r3, [r2, #8]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40007000 	.word	0x40007000

08002298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e2fe      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d075      	beq.n	80023a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b6:	4b97      	ldr	r3, [pc, #604]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c0:	4b94      	ldr	r3, [pc, #592]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3e>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_OscConfig+0x44>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d157      	bne.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e2d9      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x74>
 80022fe:	4b85      	ldr	r3, [pc, #532]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a84      	ldr	r2, [pc, #528]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b7f      	ldr	r3, [pc, #508]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7e      	ldr	r2, [pc, #504]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b7c      	ldr	r3, [pc, #496]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7b      	ldr	r2, [pc, #492]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 8002330:	4b78      	ldr	r3, [pc, #480]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a77      	ldr	r2, [pc, #476]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b75      	ldr	r3, [pc, #468]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a74      	ldr	r2, [pc, #464]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fc9c 	bl	8000c8c <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fc98 	bl	8000c8c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	@ 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e29e      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	4b6a      	ldr	r3, [pc, #424]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xc0>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fc88 	bl	8000c8c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fc84 	bl	8000c8c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e28a      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	4b60      	ldr	r3, [pc, #384]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d075      	beq.n	800249a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ae:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b8:	4b56      	ldr	r3, [pc, #344]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_OscConfig+0x136>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d002      	beq.n	80023d4 <HAL_RCC_OscConfig+0x13c>
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d11f      	bne.n	8002414 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x154>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e25d      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b49      	ldr	r3, [pc, #292]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	4946      	ldr	r1, [pc, #280]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002400:	4b45      	ldr	r3, [pc, #276]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fbf5 	bl	8000bf4 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d043      	beq.n	8002498 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e249      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d023      	beq.n	8002464 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b3d      	ldr	r3, [pc, #244]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3c      	ldr	r2, [pc, #240]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fc30 	bl	8000c8c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002430:	f7fe fc2c 	bl	8000c8c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e232      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002442:	4b34      	ldr	r3, [pc, #208]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	061b      	lsls	r3, r3, #24
 800245c:	492d      	ldr	r1, [pc, #180]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
 8002462:	e01a      	b.n	800249a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002464:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2a      	ldr	r2, [pc, #168]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 800246a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fc0c 	bl	8000c8c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002478:	f7fe fc08 	bl	8000c8c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e20e      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248a:	4b22      	ldr	r3, [pc, #136]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x1e0>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d041      	beq.n	800252a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ae:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b4:	4a17      	ldr	r2, [pc, #92]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fbe5 	bl	8000c8c <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe fbe1 	bl	8000c8c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1e7      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ef      	beq.n	80024c6 <HAL_RCC_OscConfig+0x22e>
 80024e6:	e020      	b.n	800252a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ee:	4a09      	ldr	r2, [pc, #36]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fbc8 	bl	8000c8c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fe:	e00d      	b.n	800251c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fbc4 	bl	8000c8c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d906      	bls.n	800251c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1ca      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800251c:	4b8c      	ldr	r3, [pc, #560]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ea      	bne.n	8002500 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80a6 	beq.w	8002684 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800253c:	4b84      	ldr	r3, [pc, #528]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_OscConfig+0x2b4>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x2b6>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	4b7f      	ldr	r3, [pc, #508]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	4a7e      	ldr	r2, [pc, #504]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	@ 0x58
 800255e:	4b7c      	ldr	r3, [pc, #496]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256e:	4b79      	ldr	r3, [pc, #484]	@ (8002754 <HAL_RCC_OscConfig+0x4bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d118      	bne.n	80025ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800257a:	4b76      	ldr	r3, [pc, #472]	@ (8002754 <HAL_RCC_OscConfig+0x4bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a75      	ldr	r2, [pc, #468]	@ (8002754 <HAL_RCC_OscConfig+0x4bc>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7fe fb81 	bl	8000c8c <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7fe fb7d 	bl	8000c8c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e183      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002754 <HAL_RCC_OscConfig+0x4bc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d108      	bne.n	80025c6 <HAL_RCC_OscConfig+0x32e>
 80025b4:	4b66      	ldr	r3, [pc, #408]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	4a65      	ldr	r2, [pc, #404]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c4:	e024      	b.n	8002610 <HAL_RCC_OscConfig+0x378>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d110      	bne.n	80025f0 <HAL_RCC_OscConfig+0x358>
 80025ce:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d4:	4a5e      	ldr	r2, [pc, #376]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025de:	4b5c      	ldr	r3, [pc, #368]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ee:	e00f      	b.n	8002610 <HAL_RCC_OscConfig+0x378>
 80025f0:	4b57      	ldr	r3, [pc, #348]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f6:	4a56      	ldr	r2, [pc, #344]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002600:	4b53      	ldr	r3, [pc, #332]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002606:	4a52      	ldr	r2, [pc, #328]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d016      	beq.n	8002646 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fb38 	bl	8000c8c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe fb34 	bl	8000c8c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e138      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002636:	4b46      	ldr	r3, [pc, #280]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ed      	beq.n	8002620 <HAL_RCC_OscConfig+0x388>
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fb21 	bl	8000c8c <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fb1d 	bl	8000c8c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e121      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002664:	4b3a      	ldr	r3, [pc, #232]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ed      	bne.n	800264e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002672:	7ffb      	ldrb	r3, [r7, #31]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002678:	4b35      	ldr	r3, [pc, #212]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	4a34      	ldr	r2, [pc, #208]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002682:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03c      	beq.n	800270a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002698:	4b2d      	ldr	r3, [pc, #180]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800269a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800269e:	4a2c      	ldr	r2, [pc, #176]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe faf0 	bl	8000c8c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b0:	f7fe faec 	bl	8000c8c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0f2      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <HAL_RCC_OscConfig+0x418>
 80026d0:	e01b      	b.n	800270a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe fad3 	bl	8000c8c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ea:	f7fe facf 	bl	8000c8c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e0d5      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026fc:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ef      	bne.n	80026ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80c9 	beq.w	80028a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002714:	4b0e      	ldr	r3, [pc, #56]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b0c      	cmp	r3, #12
 800271e:	f000 8083 	beq.w	8002828 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d15e      	bne.n	80027e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a08      	ldr	r2, [pc, #32]	@ (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002730:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe faa9 	bl	8000c8c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273c:	e00c      	b.n	8002758 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe faa5 	bl	8000c8c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d905      	bls.n	8002758 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0ab      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
 8002750:	40021000 	.word	0x40021000
 8002754:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002758:	4b55      	ldr	r3, [pc, #340]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ec      	bne.n	800273e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002764:	4b52      	ldr	r3, [pc, #328]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	4b52      	ldr	r3, [pc, #328]	@ (80028b4 <HAL_RCC_OscConfig+0x61c>)
 800276a:	4013      	ands	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6a11      	ldr	r1, [r2, #32]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002774:	3a01      	subs	r2, #1
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800277e:	0212      	lsls	r2, r2, #8
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002786:	0852      	lsrs	r2, r2, #1
 8002788:	3a01      	subs	r2, #1
 800278a:	0552      	lsls	r2, r2, #21
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002792:	0852      	lsrs	r2, r2, #1
 8002794:	3a01      	subs	r2, #1
 8002796:	0652      	lsls	r2, r2, #25
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800279e:	06d2      	lsls	r2, r2, #27
 80027a0:	430a      	orrs	r2, r1
 80027a2:	4943      	ldr	r1, [pc, #268]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b41      	ldr	r3, [pc, #260]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a40      	ldr	r2, [pc, #256]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027b4:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a3d      	ldr	r2, [pc, #244]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fa64 	bl	8000c8c <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe fa60 	bl	8000c8c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e066      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	4b35      	ldr	r3, [pc, #212]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x530>
 80027e6:	e05e      	b.n	80028a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a30      	ldr	r2, [pc, #192]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fa4a 	bl	8000c8c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fa46 	bl	8000c8c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e04c      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280e:	4b28      	ldr	r3, [pc, #160]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800281a:	4b25      	ldr	r3, [pc, #148]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4924      	ldr	r1, [pc, #144]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 8002820:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <HAL_RCC_OscConfig+0x620>)
 8002822:	4013      	ands	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
 8002826:	e03e      	b.n	80028a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e039      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002834:	4b1e      	ldr	r3, [pc, #120]	@ (80028b0 <HAL_RCC_OscConfig+0x618>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	429a      	cmp	r2, r3
 8002846:	d12c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	3b01      	subs	r3, #1
 8002854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d123      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002864:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d11b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d113      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	019f800c 	.word	0x019f800c
 80028b8:	feeefffc 	.word	0xfeeefffc

080028bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e11e      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b91      	ldr	r3, [pc, #580]	@ (8002b1c <HAL_RCC_ClockConfig+0x260>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d910      	bls.n	8002904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b8e      	ldr	r3, [pc, #568]	@ (8002b1c <HAL_RCC_ClockConfig+0x260>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 020f 	bic.w	r2, r3, #15
 80028ea:	498c      	ldr	r1, [pc, #560]	@ (8002b1c <HAL_RCC_ClockConfig+0x260>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b8a      	ldr	r3, [pc, #552]	@ (8002b1c <HAL_RCC_ClockConfig+0x260>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e106      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d073      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d129      	bne.n	800296c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002918:	4b81      	ldr	r3, [pc, #516]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0f4      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002928:	f000 f99e 	bl	8002c68 <RCC_GetSysClockFreqFromPLLSource>
 800292c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4a7c      	ldr	r2, [pc, #496]	@ (8002b24 <HAL_RCC_ClockConfig+0x268>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d93f      	bls.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002936:	4b7a      	ldr	r3, [pc, #488]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d033      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	d12f      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002956:	4b72      	ldr	r3, [pc, #456]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800295e:	4a70      	ldr	r2, [pc, #448]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002964:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e024      	b.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d107      	bne.n	8002984 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002974:	4b6a      	ldr	r3, [pc, #424]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0c6      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002984:	4b66      	ldr	r3, [pc, #408]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0be      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002994:	f000 f8ce 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002998:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4a61      	ldr	r2, [pc, #388]	@ (8002b24 <HAL_RCC_ClockConfig+0x268>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d909      	bls.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4957      	ldr	r1, [pc, #348]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c8:	f7fe f960 	bl	8000c8c <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fe f95c 	bl	8000c8c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e095      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 020c 	and.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1eb      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d023      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b43      	ldr	r3, [pc, #268]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a42      	ldr	r2, [pc, #264]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a30:	4a3b      	ldr	r2, [pc, #236]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b39      	ldr	r3, [pc, #228]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4936      	ldr	r1, [pc, #216]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b80      	cmp	r3, #128	@ 0x80
 8002a50:	d105      	bne.n	8002a5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a52:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4a32      	ldr	r2, [pc, #200]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d21d      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 020f 	bic.w	r2, r3, #15
 8002a74:	4929      	ldr	r1, [pc, #164]	@ (8002b1c <HAL_RCC_ClockConfig+0x260>)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f906 	bl	8000c8c <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fe f902 	bl	8000c8c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e03b      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_RCC_ClockConfig+0x260>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1ed      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4917      	ldr	r1, [pc, #92]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490f      	ldr	r1, [pc, #60]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ae6:	f000 f825 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	490c      	ldr	r1, [pc, #48]	@ (8002b28 <HAL_RCC_ClockConfig+0x26c>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <HAL_RCC_ClockConfig+0x270>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_RCC_ClockConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f872 	bl	8000bf4 <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	04c4b400 	.word	0x04c4b400
 8002b28:	080049c4 	.word	0x080049c4
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d102      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b46:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	e047      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b4c:	4b27      	ldr	r3, [pc, #156]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b58:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e03e      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b5e:	4b23      	ldr	r3, [pc, #140]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d136      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b6a:	4b20      	ldr	r3, [pc, #128]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3301      	adds	r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d10c      	bne.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b88:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	4a16      	ldr	r2, [pc, #88]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b92:	68d2      	ldr	r2, [r2, #12]
 8002b94:	0a12      	lsrs	r2, r2, #8
 8002b96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	617b      	str	r3, [r7, #20]
      break;
 8002ba0:	e00c      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ba2:	4a13      	ldr	r2, [pc, #76]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	4a10      	ldr	r2, [pc, #64]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	0a12      	lsrs	r2, r2, #8
 8002bb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
      break;
 8002bba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	0e5b      	lsrs	r3, r3, #25
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	e001      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bdc:	693b      	ldr	r3, [r7, #16]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	007a1200 	.word	0x007a1200

08002bf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c14:	f7ff fff0 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4904      	ldr	r1, [pc, #16]	@ (8002c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	080049d4 	.word	0x080049d4

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c40:	f7ff ffda 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0adb      	lsrs	r3, r3, #11
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4904      	ldr	r1, [pc, #16]	@ (8002c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	080049d4 	.word	0x080049d4

08002c68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d10c      	bne.n	8002ca6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c8c:	4a17      	ldr	r2, [pc, #92]	@ (8002cec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	4a14      	ldr	r2, [pc, #80]	@ (8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c96:	68d2      	ldr	r2, [r2, #12]
 8002c98:	0a12      	lsrs	r2, r2, #8
 8002c9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
    break;
 8002ca4:	e00c      	b.n	8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ca6:	4a12      	ldr	r2, [pc, #72]	@ (8002cf0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cb0:	68d2      	ldr	r2, [r2, #12]
 8002cb2:	0a12      	lsrs	r2, r2, #8
 8002cb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
    break;
 8002cbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cc0:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0e5b      	lsrs	r3, r3, #25
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cda:	687b      	ldr	r3, [r7, #4]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	007a1200 	.word	0x007a1200
 8002cf0:	00f42400 	.word	0x00f42400

08002cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d00:	2300      	movs	r3, #0
 8002d02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8098 	beq.w	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d16:	4b43      	ldr	r3, [pc, #268]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10d      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	4b40      	ldr	r3, [pc, #256]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	4a3f      	ldr	r2, [pc, #252]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a39      	ldr	r2, [pc, #228]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d4a:	f7fd ff9f 	bl	8000c8c <HAL_GetTick>
 8002d4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d50:	e009      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d52:	f7fd ff9b 	bl	8000c8c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d902      	bls.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	74fb      	strb	r3, [r7, #19]
        break;
 8002d64:	e005      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d66:	4b30      	ldr	r3, [pc, #192]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0ef      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d159      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d78:	4b2a      	ldr	r3, [pc, #168]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01e      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d019      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d94:	4b23      	ldr	r3, [pc, #140]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002da0:	4b20      	ldr	r3, [pc, #128]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002db0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dc0:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fd ff5b 	bl	8000c8c <HAL_GetTick>
 8002dd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd8:	e00b      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fd ff57 	bl	8000c8c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d902      	bls.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	74fb      	strb	r3, [r7, #19]
            break;
 8002df0:	e006      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ec      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e06:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	4903      	ldr	r1, [pc, #12]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e1c:	e008      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	74bb      	strb	r3, [r7, #18]
 8002e22:	e005      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2c:	7cfb      	ldrb	r3, [r7, #19]
 8002e2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e30:	7c7b      	ldrb	r3, [r7, #17]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e36:	4ba6      	ldr	r3, [pc, #664]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	4aa5      	ldr	r2, [pc, #660]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e4e:	4ba0      	ldr	r3, [pc, #640]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f023 0203 	bic.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	499c      	ldr	r1, [pc, #624]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e70:	4b97      	ldr	r3, [pc, #604]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f023 020c 	bic.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	4994      	ldr	r1, [pc, #592]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e92:	4b8f      	ldr	r3, [pc, #572]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	498b      	ldr	r1, [pc, #556]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eb4:	4b86      	ldr	r3, [pc, #536]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	4983      	ldr	r1, [pc, #524]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed6:	4b7e      	ldr	r3, [pc, #504]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002edc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	497a      	ldr	r1, [pc, #488]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef8:	4b75      	ldr	r3, [pc, #468]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	4972      	ldr	r1, [pc, #456]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4969      	ldr	r1, [pc, #420]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f3c:	4b64      	ldr	r3, [pc, #400]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4961      	ldr	r1, [pc, #388]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	4958      	ldr	r1, [pc, #352]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f80:	4b53      	ldr	r3, [pc, #332]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8e:	4950      	ldr	r1, [pc, #320]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002faa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fb8:	4b45      	ldr	r3, [pc, #276]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc6:	4942      	ldr	r1, [pc, #264]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ff0:	4b37      	ldr	r3, [pc, #220]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	4934      	ldr	r1, [pc, #208]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003010:	4b2f      	ldr	r3, [pc, #188]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a2e      	ldr	r2, [pc, #184]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800301a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003028:	4b29      	ldr	r3, [pc, #164]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003036:	4926      	ldr	r1, [pc, #152]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003042:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003046:	d105      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003048:	4b21      	ldr	r3, [pc, #132]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a20      	ldr	r2, [pc, #128]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003052:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306e:	4918      	ldr	r1, [pc, #96]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800307e:	d105      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003080:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a12      	ldr	r2, [pc, #72]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800308a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003098:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a6:	490a      	ldr	r1, [pc, #40]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030b6:	d105      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a04      	ldr	r2, [pc, #16]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e042      	b.n	800316c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fd fc83 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2224      	movs	r2, #36	@ 0x24
 8003102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 feea 	bl	8003ef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fc1b 	bl	8003960 <UART_SetConfig>
 800312a:	4603      	mov	r3, r0
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e01b      	b.n	800316c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 ff69 	bl	800403c <UART_CheckIdleState>
 800316a:	4603      	mov	r3, r0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003174:	b480      	push	{r7}
 8003176:	b091      	sub	sp, #68	@ 0x44
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	2b20      	cmp	r3, #32
 800318a:	d178      	bne.n	800327e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_UART_Transmit_IT+0x24>
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e071      	b.n	8003280 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2221      	movs	r2, #33	@ 0x21
 80031c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031d0:	d12a      	bne.n	8003228 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031da:	d107      	bne.n	80031ec <HAL_UART_Transmit_IT+0x78>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a29      	ldr	r2, [pc, #164]	@ (800328c <HAL_UART_Transmit_IT+0x118>)
 80031e8:	679a      	str	r2, [r3, #120]	@ 0x78
 80031ea:	e002      	b.n	80031f2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a28      	ldr	r2, [pc, #160]	@ (8003290 <HAL_UART_Transmit_IT+0x11c>)
 80031f0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3308      	adds	r3, #8
 80031f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003208:	63bb      	str	r3, [r7, #56]	@ 0x38
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003212:	637a      	str	r2, [r7, #52]	@ 0x34
 8003214:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003218:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e5      	bne.n	80031f2 <HAL_UART_Transmit_IT+0x7e>
 8003226:	e028      	b.n	800327a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003230:	d107      	bne.n	8003242 <HAL_UART_Transmit_IT+0xce>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <HAL_UART_Transmit_IT+0x120>)
 800323e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003240:	e002      	b.n	8003248 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a14      	ldr	r2, [pc, #80]	@ (8003298 <HAL_UART_Transmit_IT+0x124>)
 8003246:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	613b      	str	r3, [r7, #16]
   return(result);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800325c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003266:	623b      	str	r3, [r7, #32]
 8003268:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	69f9      	ldr	r1, [r7, #28]
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	61bb      	str	r3, [r7, #24]
   return(result);
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e6      	bne.n	8003248 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3744      	adds	r7, #68	@ 0x44
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	080045bd 	.word	0x080045bd
 8003290:	080044dd 	.word	0x080044dd
 8003294:	0800441b 	.word	0x0800441b
 8003298:	08004363 	.word	0x08004363

0800329c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b0ba      	sub	sp, #232	@ 0xe8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80032c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80032ca:	4013      	ands	r3, r2
 80032cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80032d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11b      	bne.n	8003310 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80032d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d015      	beq.n	8003310 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80032f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8300 	beq.w	8003906 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
      }
      return;
 800330e:	e2fa      	b.n	8003906 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8123 	beq.w	8003560 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800331a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800331e:	4b8d      	ldr	r3, [pc, #564]	@ (8003554 <HAL_UART_IRQHandler+0x2b8>)
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800332a:	4b8b      	ldr	r3, [pc, #556]	@ (8003558 <HAL_UART_IRQHandler+0x2bc>)
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8116 	beq.w	8003560 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d011      	beq.n	8003364 <HAL_UART_IRQHandler+0xc8>
 8003340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00b      	beq.n	8003364 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d011      	beq.n	8003394 <HAL_UART_IRQHandler+0xf8>
 8003370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00b      	beq.n	8003394 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2202      	movs	r2, #2
 8003382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d011      	beq.n	80033c4 <HAL_UART_IRQHandler+0x128>
 80033a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2204      	movs	r2, #4
 80033b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	f043 0202 	orr.w	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80033d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80033dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80033e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003554 <HAL_UART_IRQHandler+0x2b8>)
 80033e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2208      	movs	r2, #8
 80033ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	f043 0208 	orr.w	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003408:	2b00      	cmp	r3, #0
 800340a:	d012      	beq.n	8003432 <HAL_UART_IRQHandler+0x196>
 800340c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003410:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00c      	beq.n	8003432 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8266 	beq.w	800390a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d013      	beq.n	8003472 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003478:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003486:	2b40      	cmp	r3, #64	@ 0x40
 8003488:	d005      	beq.n	8003496 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800348a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800348e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003492:	2b00      	cmp	r3, #0
 8003494:	d054      	beq.n	8003540 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fee7 	bl	800426a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b40      	cmp	r3, #64	@ 0x40
 80034a8:	d146      	bne.n	8003538 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3308      	adds	r3, #8
 80034b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3308      	adds	r3, #8
 80034d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1d9      	bne.n	80034aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003506:	4a15      	ldr	r2, [pc, #84]	@ (800355c <HAL_UART_IRQHandler+0x2c0>)
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd fd51 	bl	8000fb8 <HAL_DMA_Abort_IT>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d019      	beq.n	8003550 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800352a:	4610      	mov	r0, r2
 800352c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352e:	e00f      	b.n	8003550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9ff 	bl	8003934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003536:	e00b      	b.n	8003550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9fb 	bl	8003934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353e:	e007      	b.n	8003550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f9f7 	bl	8003934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800354e:	e1dc      	b.n	800390a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	bf00      	nop
    return;
 8003552:	e1da      	b.n	800390a <HAL_UART_IRQHandler+0x66e>
 8003554:	10000001 	.word	0x10000001
 8003558:	04000120 	.word	0x04000120
 800355c:	08004337 	.word	0x08004337

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 8170 	bne.w	800384a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8169 	beq.w	800384a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8162 	beq.w	800384a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2210      	movs	r2, #16
 800358c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	f040 80d8 	bne.w	800374e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80af 	beq.w	8003714 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80035bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035c0:	429a      	cmp	r2, r3
 80035c2:	f080 80a7 	bcs.w	8003714 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8087 	bne.w	80036f2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800360e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003612:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800361a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1da      	bne.n	80035e4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3308      	adds	r3, #8
 8003634:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800363e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003652:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003656:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800365a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e1      	bne.n	800362e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3308      	adds	r3, #8
 8003670:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800367a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800367c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800368e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003690:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003694:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800369c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e3      	bne.n	800366a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c0:	f023 0310 	bic.w	r3, r3, #16
 80036c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e4      	bne.n	80036b0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fc0a 	bl	8000f06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003704:	b29b      	uxth	r3, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	b29b      	uxth	r3, r3
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f91b 	bl	8003948 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003712:	e0fc      	b.n	800390e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800371a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800371e:	429a      	cmp	r2, r3
 8003720:	f040 80f5 	bne.w	800390e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	f040 80eb 	bne.w	800390e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8fe 	bl	8003948 <HAL_UARTEx_RxEventCallback>
      return;
 800374c:	e0df      	b.n	800390e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800375a:	b29b      	uxth	r3, r3
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80d1 	beq.w	8003912 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80cc 	beq.w	8003912 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800378e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800379c:	647b      	str	r3, [r7, #68]	@ 0x44
 800379e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e4      	bne.n	800377a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3308      	adds	r3, #8
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	623b      	str	r3, [r7, #32]
   return(result);
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e1      	bne.n	80037b0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	60fb      	str	r3, [r7, #12]
   return(result);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f023 0310 	bic.w	r3, r3, #16
 8003814:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	69b9      	ldr	r1, [r7, #24]
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	617b      	str	r3, [r7, #20]
   return(result);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e4      	bne.n	8003800 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800383c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f880 	bl	8003948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003848:	e063      	b.n	8003912 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <HAL_UART_IRQHandler+0x5d8>
 8003856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800386a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 ff45 	bl	80046fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003872:	e051      	b.n	8003918 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d014      	beq.n	80038aa <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800388c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03a      	beq.n	8003916 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
    }
    return;
 80038a8:	e035      	b.n	8003916 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_UART_IRQHandler+0x62e>
 80038b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 feef 	bl	80046a6 <UART_EndTransmit_IT>
    return;
 80038c8:	e026      	b.n	8003918 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_UART_IRQHandler+0x64e>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038da:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 ff1e 	bl	8004724 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038e8:	e016      	b.n	8003918 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d010      	beq.n	8003918 <HAL_UART_IRQHandler+0x67c>
 80038f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da0c      	bge.n	8003918 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 ff06 	bl	8004710 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003904:	e008      	b.n	8003918 <HAL_UART_IRQHandler+0x67c>
      return;
 8003906:	bf00      	nop
 8003908:	e006      	b.n	8003918 <HAL_UART_IRQHandler+0x67c>
    return;
 800390a:	bf00      	nop
 800390c:	e004      	b.n	8003918 <HAL_UART_IRQHandler+0x67c>
      return;
 800390e:	bf00      	nop
 8003910:	e002      	b.n	8003918 <HAL_UART_IRQHandler+0x67c>
      return;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HAL_UART_IRQHandler+0x67c>
    return;
 8003916:	bf00      	nop
  }
}
 8003918:	37e8      	adds	r7, #232	@ 0xe8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop

08003920 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b08c      	sub	sp, #48	@ 0x30
 8003966:	af00      	add	r7, sp, #0
 8003968:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	431a      	orrs	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	431a      	orrs	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	4313      	orrs	r3, r2
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4bab      	ldr	r3, [pc, #684]	@ (8003c3c <UART_SetConfig+0x2dc>)
 8003990:	4013      	ands	r3, r2
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003998:	430b      	orrs	r3, r1
 800399a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4aa0      	ldr	r2, [pc, #640]	@ (8003c40 <UART_SetConfig+0x2e0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c8:	4313      	orrs	r3, r2
 80039ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80039d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	f023 010f 	bic.w	r1, r3, #15
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a91      	ldr	r2, [pc, #580]	@ (8003c44 <UART_SetConfig+0x2e4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d125      	bne.n	8003a50 <UART_SetConfig+0xf0>
 8003a04:	4b90      	ldr	r3, [pc, #576]	@ (8003c48 <UART_SetConfig+0x2e8>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d81a      	bhi.n	8003a48 <UART_SetConfig+0xe8>
 8003a12:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <UART_SetConfig+0xb8>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a41 	.word	0x08003a41
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a2e:	e0d6      	b.n	8003bde <UART_SetConfig+0x27e>
 8003a30:	2302      	movs	r3, #2
 8003a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a36:	e0d2      	b.n	8003bde <UART_SetConfig+0x27e>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a3e:	e0ce      	b.n	8003bde <UART_SetConfig+0x27e>
 8003a40:	2308      	movs	r3, #8
 8003a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a46:	e0ca      	b.n	8003bde <UART_SetConfig+0x27e>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4e:	e0c6      	b.n	8003bde <UART_SetConfig+0x27e>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a7d      	ldr	r2, [pc, #500]	@ (8003c4c <UART_SetConfig+0x2ec>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d138      	bne.n	8003acc <UART_SetConfig+0x16c>
 8003a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8003c48 <UART_SetConfig+0x2e8>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b0c      	cmp	r3, #12
 8003a66:	d82d      	bhi.n	8003ac4 <UART_SetConfig+0x164>
 8003a68:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <UART_SetConfig+0x110>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003aa5 	.word	0x08003aa5
 8003a74:	08003ac5 	.word	0x08003ac5
 8003a78:	08003ac5 	.word	0x08003ac5
 8003a7c:	08003ac5 	.word	0x08003ac5
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003ac5 	.word	0x08003ac5
 8003a88:	08003ac5 	.word	0x08003ac5
 8003a8c:	08003ac5 	.word	0x08003ac5
 8003a90:	08003aad 	.word	0x08003aad
 8003a94:	08003ac5 	.word	0x08003ac5
 8003a98:	08003ac5 	.word	0x08003ac5
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003abd 	.word	0x08003abd
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aaa:	e098      	b.n	8003bde <UART_SetConfig+0x27e>
 8003aac:	2302      	movs	r3, #2
 8003aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab2:	e094      	b.n	8003bde <UART_SetConfig+0x27e>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aba:	e090      	b.n	8003bde <UART_SetConfig+0x27e>
 8003abc:	2308      	movs	r3, #8
 8003abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac2:	e08c      	b.n	8003bde <UART_SetConfig+0x27e>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aca:	e088      	b.n	8003bde <UART_SetConfig+0x27e>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5f      	ldr	r2, [pc, #380]	@ (8003c50 <UART_SetConfig+0x2f0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d125      	bne.n	8003b22 <UART_SetConfig+0x1c2>
 8003ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c48 <UART_SetConfig+0x2e8>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ae0:	2b30      	cmp	r3, #48	@ 0x30
 8003ae2:	d016      	beq.n	8003b12 <UART_SetConfig+0x1b2>
 8003ae4:	2b30      	cmp	r3, #48	@ 0x30
 8003ae6:	d818      	bhi.n	8003b1a <UART_SetConfig+0x1ba>
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d00a      	beq.n	8003b02 <UART_SetConfig+0x1a2>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d814      	bhi.n	8003b1a <UART_SetConfig+0x1ba>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <UART_SetConfig+0x19a>
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d008      	beq.n	8003b0a <UART_SetConfig+0x1aa>
 8003af8:	e00f      	b.n	8003b1a <UART_SetConfig+0x1ba>
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b00:	e06d      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b02:	2302      	movs	r3, #2
 8003b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b08:	e069      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b10:	e065      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b12:	2308      	movs	r3, #8
 8003b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b18:	e061      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b20:	e05d      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a4b      	ldr	r2, [pc, #300]	@ (8003c54 <UART_SetConfig+0x2f4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d125      	bne.n	8003b78 <UART_SetConfig+0x218>
 8003b2c:	4b46      	ldr	r3, [pc, #280]	@ (8003c48 <UART_SetConfig+0x2e8>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b38:	d016      	beq.n	8003b68 <UART_SetConfig+0x208>
 8003b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b3c:	d818      	bhi.n	8003b70 <UART_SetConfig+0x210>
 8003b3e:	2b80      	cmp	r3, #128	@ 0x80
 8003b40:	d00a      	beq.n	8003b58 <UART_SetConfig+0x1f8>
 8003b42:	2b80      	cmp	r3, #128	@ 0x80
 8003b44:	d814      	bhi.n	8003b70 <UART_SetConfig+0x210>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <UART_SetConfig+0x1f0>
 8003b4a:	2b40      	cmp	r3, #64	@ 0x40
 8003b4c:	d008      	beq.n	8003b60 <UART_SetConfig+0x200>
 8003b4e:	e00f      	b.n	8003b70 <UART_SetConfig+0x210>
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b56:	e042      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b5e:	e03e      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b60:	2304      	movs	r3, #4
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b66:	e03a      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b68:	2308      	movs	r3, #8
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6e:	e036      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b70:	2310      	movs	r3, #16
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b76:	e032      	b.n	8003bde <UART_SetConfig+0x27e>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a30      	ldr	r2, [pc, #192]	@ (8003c40 <UART_SetConfig+0x2e0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12a      	bne.n	8003bd8 <UART_SetConfig+0x278>
 8003b82:	4b31      	ldr	r3, [pc, #196]	@ (8003c48 <UART_SetConfig+0x2e8>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b90:	d01a      	beq.n	8003bc8 <UART_SetConfig+0x268>
 8003b92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b96:	d81b      	bhi.n	8003bd0 <UART_SetConfig+0x270>
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9c:	d00c      	beq.n	8003bb8 <UART_SetConfig+0x258>
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba2:	d815      	bhi.n	8003bd0 <UART_SetConfig+0x270>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <UART_SetConfig+0x250>
 8003ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bac:	d008      	beq.n	8003bc0 <UART_SetConfig+0x260>
 8003bae:	e00f      	b.n	8003bd0 <UART_SetConfig+0x270>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bb6:	e012      	b.n	8003bde <UART_SetConfig+0x27e>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bbe:	e00e      	b.n	8003bde <UART_SetConfig+0x27e>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc6:	e00a      	b.n	8003bde <UART_SetConfig+0x27e>
 8003bc8:	2308      	movs	r3, #8
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bce:	e006      	b.n	8003bde <UART_SetConfig+0x27e>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd6:	e002      	b.n	8003bde <UART_SetConfig+0x27e>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <UART_SetConfig+0x2e0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	f040 80a8 	bne.w	8003d3a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d834      	bhi.n	8003c5c <UART_SetConfig+0x2fc>
 8003bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <UART_SetConfig+0x298>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c5d 	.word	0x08003c5d
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c5d 	.word	0x08003c5d
 8003c08:	08003c2b 	.word	0x08003c2b
 8003c0c:	08003c5d 	.word	0x08003c5d
 8003c10:	08003c5d 	.word	0x08003c5d
 8003c14:	08003c5d 	.word	0x08003c5d
 8003c18:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f7fe fff8 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c22:	e021      	b.n	8003c68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <UART_SetConfig+0x2f8>)
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c28:	e01e      	b.n	8003c68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7fe ff83 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003c2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c30:	e01a      	b.n	8003c68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c38:	e016      	b.n	8003c68 <UART_SetConfig+0x308>
 8003c3a:	bf00      	nop
 8003c3c:	cfff69f3 	.word	0xcfff69f3
 8003c40:	40008000 	.word	0x40008000
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40004400 	.word	0x40004400
 8003c50:	40004800 	.word	0x40004800
 8003c54:	40004c00 	.word	0x40004c00
 8003c58:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 812a 	beq.w	8003ec4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	4a9e      	ldr	r2, [pc, #632]	@ (8003ef0 <UART_SetConfig+0x590>)
 8003c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d305      	bcc.n	8003ca0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d903      	bls.n	8003ca8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ca6:	e10d      	b.n	8003ec4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	2200      	movs	r2, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	60fa      	str	r2, [r7, #12]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef0 <UART_SetConfig+0x590>)
 8003cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cca:	f7fc faa5 	bl	8000218 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	020b      	lsls	r3, r1, #8
 8003ce0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ce4:	0202      	lsls	r2, r0, #8
 8003ce6:	6979      	ldr	r1, [r7, #20]
 8003ce8:	6849      	ldr	r1, [r1, #4]
 8003cea:	0849      	lsrs	r1, r1, #1
 8003cec:	2000      	movs	r0, #0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	eb12 0804 	adds.w	r8, r2, r4
 8003cf6:	eb43 0905 	adc.w	r9, r3, r5
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	469a      	mov	sl, r3
 8003d02:	4693      	mov	fp, r2
 8003d04:	4652      	mov	r2, sl
 8003d06:	465b      	mov	r3, fp
 8003d08:	4640      	mov	r0, r8
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	f7fc fa84 	bl	8000218 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d1e:	d308      	bcc.n	8003d32 <UART_SetConfig+0x3d2>
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d26:	d204      	bcs.n	8003d32 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	60da      	str	r2, [r3, #12]
 8003d30:	e0c8      	b.n	8003ec4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d38:	e0c4      	b.n	8003ec4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d42:	d167      	bne.n	8003e14 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003d44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d828      	bhi.n	8003d9e <UART_SetConfig+0x43e>
 8003d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <UART_SetConfig+0x3f4>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d9f 	.word	0x08003d9f
 8003d64:	08003d8f 	.word	0x08003d8f
 8003d68:	08003d9f 	.word	0x08003d9f
 8003d6c:	08003d9f 	.word	0x08003d9f
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	08003d97 	.word	0x08003d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe ff4a 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003d7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d7e:	e014      	b.n	8003daa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe ff5c 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 8003d84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d86:	e010      	b.n	8003daa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d88:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef4 <UART_SetConfig+0x594>)
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d8c:	e00d      	b.n	8003daa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8e:	f7fe fed1 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003d92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d94:	e009      	b.n	8003daa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d9c:	e005      	b.n	8003daa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8089 	beq.w	8003ec4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef0 <UART_SetConfig+0x590>)
 8003db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc4:	005a      	lsls	r2, r3, #1
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	441a      	add	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d916      	bls.n	8003e0c <UART_SetConfig+0x4ac>
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de4:	d212      	bcs.n	8003e0c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f023 030f 	bic.w	r3, r3, #15
 8003dee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	8bfb      	ldrh	r3, [r7, #30]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	8bfa      	ldrh	r2, [r7, #30]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	e05b      	b.n	8003ec4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e12:	e057      	b.n	8003ec4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d828      	bhi.n	8003e6e <UART_SetConfig+0x50e>
 8003e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <UART_SetConfig+0x4c4>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08003e6f 	.word	0x08003e6f
 8003e34:	08003e5f 	.word	0x08003e5f
 8003e38:	08003e6f 	.word	0x08003e6f
 8003e3c:	08003e6f 	.word	0x08003e6f
 8003e40:	08003e6f 	.word	0x08003e6f
 8003e44:	08003e67 	.word	0x08003e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fe fee2 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e4e:	e014      	b.n	8003e7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7fe fef4 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 8003e54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e56:	e010      	b.n	8003e7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e58:	4b26      	ldr	r3, [pc, #152]	@ (8003ef4 <UART_SetConfig+0x594>)
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e5c:	e00d      	b.n	8003e7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5e:	f7fe fe69 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003e62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e64:	e009      	b.n	8003e7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e6c:	e005      	b.n	8003e7a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e78:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d021      	beq.n	8003ec4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef0 <UART_SetConfig+0x590>)
 8003e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	441a      	add	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d909      	bls.n	8003ebe <UART_SetConfig+0x55e>
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d205      	bcs.n	8003ebe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e002      	b.n	8003ec4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2200      	movs	r2, #0
 8003ede:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ee0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3730      	adds	r7, #48	@ 0x30
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eee:	bf00      	nop
 8003ef0:	080049ec 	.word	0x080049ec
 8003ef4:	00f42400 	.word	0x00f42400

08003ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01a      	beq.n	800400e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff6:	d10a      	bne.n	800400e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b098      	sub	sp, #96	@ 0x60
 8004040:	af02      	add	r7, sp, #8
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800404c:	f7fc fe1e 	bl	8000c8c <HAL_GetTick>
 8004050:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b08      	cmp	r3, #8
 800405e:	d12f      	bne.n	80040c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004068:	2200      	movs	r2, #0
 800406a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f88e 	bl	8004190 <UART_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d022      	beq.n	80040c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800408e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004098:	647b      	str	r3, [r7, #68]	@ 0x44
 800409a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800409e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e6      	bne.n	800407a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e063      	b.n	8004188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d149      	bne.n	8004162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d6:	2200      	movs	r2, #0
 80040d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f857 	bl	8004190 <UART_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d03c      	beq.n	8004162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	623b      	str	r3, [r7, #32]
   return(result);
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004106:	633b      	str	r3, [r7, #48]	@ 0x30
 8004108:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800410c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e6      	bne.n	80040e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3308      	adds	r3, #8
 8004120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	60fb      	str	r3, [r7, #12]
   return(result);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800413a:	61fa      	str	r2, [r7, #28]
 800413c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	69b9      	ldr	r1, [r7, #24]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	617b      	str	r3, [r7, #20]
   return(result);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e5      	bne.n	800411a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e012      	b.n	8004188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3758      	adds	r7, #88	@ 0x58
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a0:	e04f      	b.n	8004242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041a8:	d04b      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fc fd6f 	bl	8000c8c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e04e      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d037      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b80      	cmp	r3, #128	@ 0x80
 80041d6:	d034      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b40      	cmp	r3, #64	@ 0x40
 80041dc:	d031      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d110      	bne.n	800420e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2208      	movs	r2, #8
 80041f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f838 	bl	800426a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2208      	movs	r2, #8
 80041fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e029      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421c:	d111      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f81e 	bl	800426a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e00f      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	429a      	cmp	r2, r3
 800425e:	d0a0      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800426a:	b480      	push	{r7}
 800426c:	b095      	sub	sp, #84	@ 0x54
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004290:	643b      	str	r3, [r7, #64]	@ 0x40
 8004292:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e3      	bne.n	80042a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d118      	bne.n	8004316 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f023 0310 	bic.w	r3, r3, #16
 80042f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	613b      	str	r3, [r7, #16]
   return(result);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800432a:	bf00      	nop
 800432c:	3754      	adds	r7, #84	@ 0x54
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff faed 	bl	8003934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004362:	b480      	push	{r7}
 8004364:	b08f      	sub	sp, #60	@ 0x3c
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004370:	2b21      	cmp	r3, #33	@ 0x21
 8004372:	d14c      	bne.n	800440e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d132      	bne.n	80043e6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	61fb      	str	r3, [r7, #28]
   return(result);
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004394:	637b      	str	r3, [r7, #52]	@ 0x34
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e6      	bne.n	8004380 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6979      	ldr	r1, [r7, #20]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	613b      	str	r3, [r7, #16]
   return(result);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e6      	bne.n	80043b2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043e4:	e013      	b.n	800440e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800440e:	bf00      	nop
 8004410:	373c      	adds	r7, #60	@ 0x3c
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800441a:	b480      	push	{r7}
 800441c:	b091      	sub	sp, #68	@ 0x44
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004428:	2b21      	cmp	r3, #33	@ 0x21
 800442a:	d151      	bne.n	80044d0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d132      	bne.n	800449e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	623b      	str	r3, [r7, #32]
   return(result);
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	633b      	str	r3, [r7, #48]	@ 0x30
 8004458:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800445c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e6      	bne.n	8004438 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	60fb      	str	r3, [r7, #12]
   return(result);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	69b9      	ldr	r1, [r7, #24]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	617b      	str	r3, [r7, #20]
   return(result);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e6      	bne.n	800446a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800449c:	e018      	b.n	80044d0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	1c9a      	adds	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80044d0:	bf00      	nop
 80044d2:	3744      	adds	r7, #68	@ 0x44
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b091      	sub	sp, #68	@ 0x44
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ea:	2b21      	cmp	r3, #33	@ 0x21
 80044ec:	d160      	bne.n	80045b0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80044f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80044f6:	e057      	b.n	80045a8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d133      	bne.n	800456c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	623b      	str	r3, [r7, #32]
   return(result);
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800451a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3308      	adds	r3, #8
 8004522:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004524:	633a      	str	r2, [r7, #48]	@ 0x30
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800452a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	60fb      	str	r3, [r7, #12]
   return(result);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800454c:	637b      	str	r3, [r7, #52]	@ 0x34
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	69b9      	ldr	r1, [r7, #24]
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	617b      	str	r3, [r7, #20]
   return(result);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e6      	bne.n	8004538 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800456a:	e021      	b.n	80045b0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d013      	beq.n	80045a2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457e:	781a      	ldrb	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80045a4:	3b01      	subs	r3, #1
 80045a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80045a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1a4      	bne.n	80044f8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80045ae:	e7ff      	b.n	80045b0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80045b0:	bf00      	nop
 80045b2:	3744      	adds	r7, #68	@ 0x44
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b091      	sub	sp, #68	@ 0x44
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	2b21      	cmp	r3, #33	@ 0x21
 80045cc:	d165      	bne.n	800469a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80045d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80045d6:	e05c      	b.n	8004692 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d133      	bne.n	800464c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3308      	adds	r3, #8
 80045ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3308      	adds	r3, #8
 8004602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004604:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004606:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800460a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	60bb      	str	r3, [r7, #8]
   return(result);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800462c:	633b      	str	r3, [r7, #48]	@ 0x30
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	613b      	str	r3, [r7, #16]
   return(result);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e6      	bne.n	8004618 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800464a:	e026      	b.n	800469a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d018      	beq.n	800468c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004674:	1c9a      	adds	r2, r3, #2
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800468c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800468e:	3b01      	subs	r3, #1
 8004690:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004692:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004694:	2b00      	cmp	r3, #0
 8004696:	d19f      	bne.n	80045d8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004698:	e7ff      	b.n	800469a <UART_TxISR_16BIT_FIFOEN+0xde>
 800469a:	bf00      	nop
 800469c:	3744      	adds	r7, #68	@ 0x44
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b088      	sub	sp, #32
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6979      	ldr	r1, [r7, #20]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	613b      	str	r3, [r7, #16]
   return(result);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e6      	bne.n	80046ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff f916 	bl	8003920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_UARTEx_DisableFifoMode+0x16>
 800474a:	2302      	movs	r3, #2
 800474c:	e027      	b.n	800479e <HAL_UARTEx_DisableFifoMode+0x66>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2224      	movs	r2, #36	@ 0x24
 800475a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800477c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047be:	2302      	movs	r3, #2
 80047c0:	e02d      	b.n	800481e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2224      	movs	r2, #36	@ 0x24
 80047ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f850 	bl	80048a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800483a:	2302      	movs	r3, #2
 800483c:	e02d      	b.n	800489a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2224      	movs	r2, #36	@ 0x24
 800484a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f812 	bl	80048a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d108      	bne.n	80048c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048c4:	e031      	b.n	800492a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048c6:	2308      	movs	r3, #8
 80048c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048ca:	2308      	movs	r3, #8
 80048cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	0e5b      	lsrs	r3, r3, #25
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	0f5b      	lsrs	r3, r3, #29
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ee:	7bbb      	ldrb	r3, [r7, #14]
 80048f0:	7b3a      	ldrb	r2, [r7, #12]
 80048f2:	4911      	ldr	r1, [pc, #68]	@ (8004938 <UARTEx_SetNbDataToProcess+0x94>)
 80048f4:	5c8a      	ldrb	r2, [r1, r2]
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048fa:	7b3a      	ldrb	r2, [r7, #12]
 80048fc:	490f      	ldr	r1, [pc, #60]	@ (800493c <UARTEx_SetNbDataToProcess+0x98>)
 80048fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004900:	fb93 f3f2 	sdiv	r3, r3, r2
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	7b7a      	ldrb	r2, [r7, #13]
 8004910:	4909      	ldr	r1, [pc, #36]	@ (8004938 <UARTEx_SetNbDataToProcess+0x94>)
 8004912:	5c8a      	ldrb	r2, [r1, r2]
 8004914:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004918:	7b7a      	ldrb	r2, [r7, #13]
 800491a:	4908      	ldr	r1, [pc, #32]	@ (800493c <UARTEx_SetNbDataToProcess+0x98>)
 800491c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800491e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	08004a04 	.word	0x08004a04
 800493c:	08004a0c 	.word	0x08004a0c

08004940 <memset>:
 8004940:	4402      	add	r2, r0
 8004942:	4603      	mov	r3, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	d100      	bne.n	800494a <memset+0xa>
 8004948:	4770      	bx	lr
 800494a:	f803 1b01 	strb.w	r1, [r3], #1
 800494e:	e7f9      	b.n	8004944 <memset+0x4>

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4d0d      	ldr	r5, [pc, #52]	@ (8004988 <__libc_init_array+0x38>)
 8004954:	4c0d      	ldr	r4, [pc, #52]	@ (800498c <__libc_init_array+0x3c>)
 8004956:	1b64      	subs	r4, r4, r5
 8004958:	10a4      	asrs	r4, r4, #2
 800495a:	2600      	movs	r6, #0
 800495c:	42a6      	cmp	r6, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	4d0b      	ldr	r5, [pc, #44]	@ (8004990 <__libc_init_array+0x40>)
 8004962:	4c0c      	ldr	r4, [pc, #48]	@ (8004994 <__libc_init_array+0x44>)
 8004964:	f000 f818 	bl	8004998 <_init>
 8004968:	1b64      	subs	r4, r4, r5
 800496a:	10a4      	asrs	r4, r4, #2
 800496c:	2600      	movs	r6, #0
 800496e:	42a6      	cmp	r6, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f855 3b04 	ldr.w	r3, [r5], #4
 8004978:	4798      	blx	r3
 800497a:	3601      	adds	r6, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004982:	4798      	blx	r3
 8004984:	3601      	adds	r6, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	08004a1c 	.word	0x08004a1c
 800498c:	08004a1c 	.word	0x08004a1c
 8004990:	08004a1c 	.word	0x08004a1c
 8004994:	08004a20 	.word	0x08004a20

08004998 <_init>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr

080049a4 <_fini>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr
